openapi: 3.0.0
info:
  title: CurioPay API
  description: API documentation for CurioPay - Personal Finance Management System
  version: 1.0.0

servers:
  - url: /api
    description: Next.js API Routes

components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: next-auth.session-token
      description: Next.js session token for authentication

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
    
    Success:
      type: object
      properties:
        success:
          type: boolean
          description: Success status
        message:
          type: string
          description: Success message

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        icon:
          type: string
        typeId:
          type: string
        isSystem:
          type: boolean
        isDefault:
          type: boolean

    Expense:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        amount:
          type: number
          format: float
        date:
          type: string
          format: date-time
        categoryId:
          type: string
        paymentMethodId:
          type: string
        notes:
          type: string
        isVoid:
          type: boolean
        category:
          $ref: '#/components/schemas/Category'
        paymentMethod:
          type: object
          properties:
            name:
              type: string

    Income:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        amount:
          type: number
          format: float
        date:
          type: string
          format: date-time
        categoryId:
          type: string
        paymentMethodId:
          type: string
        notes:
          type: string
        isVoid:
          type: boolean
        category:
          $ref: '#/components/schemas/Category'
        paymentMethod:
          type: object
          properties:
            name:
              type: string

    Profile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        contact:
          type: object
          properties:
            phone:
              type: string
            avatarUrl:
              type: string
        preferences:
          type: object
          properties:
            currency:
              type: string
            language:
              type: string
            theme:
              type: string
            monthlyBudget:
              type: number
        stats:
          type: object
          properties:
            totalExpenses:
              type: number
            categoryCount:
              type: number
        createdAt:
          type: string
          format: date-time

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    ValidationError:
      description: The request parameters failed validation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - sessionAuth: []

paths:
  /auth/reset-password:
    post:
      summary: Request password reset
      description: Send a password reset link to the user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset link sent (for security, same response whether user exists or not)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/ServerError'
    
    patch:
      summary: Reset password
      description: Reset user's password using the reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /verify:
    post:
      summary: Request email verification
      description: Send a verification email to the user
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    get:
      summary: Check email verification status
      description: Check if user's email is verified
      parameters:
        - in: query
          name: token
          schema:
            type: string
          description: Verification token (optional)
      responses:
        '200':
          description: Verification status
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /verify/confirm:
    post:
      summary: Confirm email verification
      description: Verify user's email using the verification token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /profile:
    get:
      summary: Get user profile
      description: Get the current user's profile information
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /settings:
    get:
      summary: Get user settings
      description: Get the current user's settings
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  preferences:
                    type: object
                    properties:
                      currency:
                        type: string
                      language:
                        type: string
                      theme:
                        type: string
                      monthlyBudget:
                        type: number
                  notifications:
                    type: object
                    properties:
                      email:
                        type: boolean
                      push:
                        type: boolean
                      sms:
                        type: boolean
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /settings/clear-data:
    post:
      summary: Clear user data
      description: Delete all expenses and incomes for the current user
      responses:
        '200':
          description: Data cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /expense:
    get:
      summary: Get expenses
      description: Get user's expenses with optional filtering
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category ID
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter by start date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter by end date
      responses:
        '200':
          description: List of expenses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    post:
      summary: Create expense
      description: Create a new expense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                - amount
                - category
                - paymentMethod
              properties:
                description:
                  type: string
                amount:
                  type: number
                  format: float
                category:
                  type: string
                paymentMethod:
                  type: string
                  enum: [CASH, CREDIT_CARD, DEBIT_CARD, BANK_TRANSFER, OTHER]
                date:
                  type: string
                  format: date-time
                notes:
                  type: string
      responses:
        '201':
          description: Expense created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      summary: Update expense
      description: Update an existing expense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  format: uuid
                description:
                  type: string
                amount:
                  type: number
                  format: float
                categoryId:
                  type: string
                paymentMethodId:
                  type: string
                date:
                  type: string
                  format: date-time
                notes:
                  type: string
      responses:
        '200':
          description: Expense updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    delete:
      summary: Delete expense
      description: Soft delete an expense by marking it as void
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Expense ID
      responses:
        '200':
          description: Expense deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /income:
    get:
      summary: Get incomes
      description: Get user's incomes with optional filtering
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category ID
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter by start date
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter by end date
      responses:
        '200':
          description: List of incomes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Income'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    post:
      summary: Create income
      description: Create a new income
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                - amount
                - category
                - paymentMethod
              properties:
                description:
                  type: string
                amount:
                  type: number
                  format: float
                category:
                  type: string
                paymentMethod:
                  type: string
                  enum: [CASH, CREDIT_CARD, DEBIT_CARD, BANK_TRANSFER, OTHER]
                date:
                  type: string
                  format: date-time
                notes:
                  type: string
      responses:
        '201':
          description: Income created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Income'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    put:
      summary: Update income
      description: Update an existing income
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  format: uuid
                description:
                  type: string
                amount:
                  type: number
                  format: float
                categoryId:
                  type: string
                paymentMethodId:
                  type: string
                date:
                  type: string
                  format: date-time
                notes:
                  type: string
      responses:
        '200':
          description: Income updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Income'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    delete:
      summary: Delete income
      description: Soft delete an income by marking it as void
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Income ID
      responses:
        '200':
          description: Income deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Income'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /categories:
    get:
      summary: Get categories
      description: Get user's categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    
    post:
      summary: Create category
      description: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                typeId:
                  type: string
      responses:
        '200':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError' 